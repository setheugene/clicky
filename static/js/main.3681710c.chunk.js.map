{"version":3,"sources":["components/NavBar.js","components/Banner.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["style","blue","backgroundColor","color","height","fontFamily","logo","padding","NavBar","props","react_default","a","createElement","className","status","currentScore","highScore","banner","bannertext","Banner","image","maxWidth","margin","display","flexDirection","justifyContent","alignItems","flexWrap","container","float","Cards","id","value","onClick","clicked","src","alt","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","Icons","gameOver","_this","includes","reset","scoreIncrease","push","setState","score","console","log","resetArray","newShuffle","this","_this2","components_NavBar","components_Banner","map","icon","components_Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+rBAEMA,SAAQ,CACVC,KAAM,CACFC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,QACRC,WAAY,qBAEhBC,KAAM,CACFC,QAAS,UAiBFC,EAbA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,UAAQZ,MAAOA,EAAMC,KAAMY,UAAU,oBACjCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,MAAIZ,MAAOA,EAAMM,KAAMO,UAAU,YAAjC,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYJ,EAAMK,QAChCJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,SAAgCJ,EAAMM,eAE3CL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,cAAqCJ,EAAMO,eCnBtDhB,EAAQ,CACViB,OAAQ,CACJf,gBAAiB,UACjBC,MAAO,UACPE,WAAY,oBACZD,OAAQ,QAGZc,WAAY,CACRX,QAAS,SAYFY,EAPA,SAAAV,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKZ,MAAOA,EAAMiB,OAAQJ,UAAU,oBAEpCH,EAAAC,EAAAC,cAAA,MAAIZ,MAAOA,EAAMkB,WAAYL,UAAU,eAAvC,6EChBEb,EAAQ,CACVoB,MAAO,CACCC,SAAU,QACVC,OAAQ,OACRf,QAAS,KACTgB,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,SACZC,SAAU,QAIlBC,UAAW,CACPrB,QAAS,OACTe,OAAQ,OACRO,MAAO,OAEPH,WAAY,WAkBLI,EAdD,SAAArB,GAAK,OAEfC,EAAAC,EAAAC,cAAA,WAASZ,MAAOA,EAAM4B,UAAWf,UAAU,SAASkB,GAAItB,EAAMsB,GAAIC,MAAOvB,EAAMsB,GAAIE,QAAS,kBACxFxB,EAAMyB,QAAQzB,EAAMsB,MACpBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYb,MAAOA,EAAMoB,MAAOe,IAAK1B,EAAMW,MAAOgB,IAAI,oBCpBvEC,EAAe,SAACC,GAEpB,IADA,IAAIC,EAAUD,EAAME,OACbD,EAAU,GAAG,CAClB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAEnCM,EAAOP,IADXC,GAEAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASI,EAEjB,OAAOP,GAmGMQ,6MA/FbC,MAAQ,CACNjC,OAAQ,GACRC,aAAc,EACdC,UAAW,EACXkB,QAAS,GACTc,QACAC,UAAU,KASZf,QAAU,SAACH,GAEJmB,EAAKH,MAAMb,QAAQiB,SAASpB,GAO/BmB,EAAKE,SANLF,EAAKG,gBACLH,EAAKH,MAAMb,QAAQoB,KAAKvB,GACxBmB,EAAKK,SAAS,CACZN,UAAU,QAQlBI,cAAgB,WACd,IAAIG,EAAQN,EAAKH,MAAMhC,aAAc,EACrC0C,QAAQC,IAAI,sBACRF,IAAUN,EAAKH,MAAMC,MAAMR,OAC7BU,EAAKK,SAAS,CACZzC,OAAQ,0CACRC,aAAc,EACdmB,QAAS,GACTc,QACAC,UAAU,IAEJO,EAAQN,EAAKH,MAAM/B,UAC3BkC,EAAKK,SAAS,CACZvC,UAAWwC,EACXzC,aAAcyC,EACd1C,OAAQ,6BAGVoC,EAAKK,SAAS,CACZxC,aAAcyC,EACd1C,OAAQ,aAGZoC,EAAKS,gBAIPP,MAAQ,WACNF,EAAKK,SAAS,CACZzC,OAAQ,YACRE,UAAWkC,EAAKH,MAAM/B,UACtBD,aAAc,EACdmB,QAAS,GACTc,QACAC,UAAU,IAEZQ,QAAQC,IAAI,cAAeR,EAAKH,MAAME,UACtCC,EAAKS,gBAIPA,WAAa,WACX,IAAIC,EAAavB,EAAaW,GAC9BE,EAAKK,SAAS,CAACP,MAAOY,wFA7DpBC,KAAKN,SAAS,CAACzC,OAAQ,mEAgEhB,IAAAgD,EAAAD,KACP,OACEnD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAD,CAAQjD,OAAQ+C,KAAKd,MAAMjC,OAAQC,aAAc8C,KAAKd,MAAMhC,aAAcC,UAAW6C,KAAKd,MAAM/B,aAGlGN,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAAf,IAAoBgD,KAAKd,MAAMC,MAAMiB,IAAI,SAAAC,GAAI,OAC3CxD,EAAAC,EAAAC,cAACuD,EAAD,CAAOtD,UAAU,GAAGuD,IAAKF,EAAKnC,GAAIA,GAAImC,EAAKnC,GAAIX,MAAO8C,EAAK9C,MAAOc,QAAS4B,EAAK5B,qBArFtEmC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3681710c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n    blue: {\n        backgroundColor: '#0085B2',\n        color: 'white',\n        height: '220px',\n        fontFamily: 'Pacifico, cursive'\n    },\n    logo: {\n        padding: '20px'\n    }\n}\n\nconst NavBar = props => (\n    <header style={style.blue} className=\"container, w-100\">\n        <nav className=\"nav-fill\">\n            <h1 style={style.logo} className=\"nav-item\">Clickmoji</h1>\n            <h4 className=\"nav-item\">{props.status}</h4>\n            <div><h4 className=\"nav-item\">Score:{props.currentScore}</h4></div>\n            \n            <div><h4 className=\"nav-item\">High Score:{props.highScore}</h4></div>\n        </nav>\n    </header>\n\n)\n\nexport default NavBar;\n","import React from \"react\";\n\nconst style = {\n    banner: {\n        backgroundColor: '#EEE774',\n        color: '#464745',\n        fontFamily: 'Pacifico, cursive',\n        height: '70px',\n        \n    },\n    bannertext: {\n        padding: '15px'\n    }\n    \n}\n\nconst Banner = props => (\n    <div style={style.banner} className=\"container, w-100\">\n    {/* <h1 className=\"text-center\">Clicky Game!</h1> */}\n    <h2 style={style.bannertext} className=\"text-center\">Click on an image to earn points, but don't click the same photo twice!</h2>\n    </div>\n)\n\nexport default Banner;","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst style = {\n    image: {\n            maxWidth: '150px',\n            margin: 'auto',\n            padding: '10',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexWrap: 'wrap',\n            // float: 'left'\n          \n    },\n    container: {\n        padding: '15px',\n        margin: '20px',\n        float: 'left',\n        // float: 'right',\n        alignItems: 'center'\n    }\n}\n\nconst Cards = props => (\n    \n    <section style={style.container} className=\"d-flex\" id={props.id} value={props.id} onClick={() =>\n        props.clicked(props.id)}>\n        <img className=\"flex-fill\" style={style.image} src={props.image} alt=\"emojis\"/>\n\n    </section>\n    \n)\n\nCards.propTypes = {\n    cards: PropTypes.array\n}\n\nexport default Cards;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Banner from './components/Banner';\nimport Cards from './components/Cards';\nimport Icons from './icons.json'\n\n//function to shuffle the icons\nconst shuffleArray = (array) => {\n  let counter = array.length;\n  while (counter > 0) {\n    let index = Math.floor(Math.random() * counter);\n    counter --;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    status: \"\",\n    currentScore: 0,\n    highScore: 0,\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  //display starting message on mount of component\n  componentDidMount() {\n    this.setState({status: \"Click an Emoji to get started\"})\n  };\n\n  //when icon gets clicked add id to an array and increase score\n  clicked = (id) => {\n    // console.log('clicked image with id: ${id}');\n    if (!this.state.clicked.includes(id)){\n      this.scoreIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.reset();\n    }\n  }\n\n  //when player clicks it adds one to score and checks if user has won\nscoreIncrease = () => {\n  let score = this.state.currentScore +1;\n  console.log('The score goes up!');\n  if (score === this.state.Icons.length) {\n    this.setState({\n      status: \"You Won!! Start clicking to play again!\",\n      currentScore: 0,\n      clicked: [],\n      Icons,\n      gameOver: false\n    });\n  }else if (score > this.state.highScore) {\n    this.setState({\n      highScore: score,\n      currentScore: score,\n      status: \"Correct! New High Score!\"\n    });\n  }else {\n    this.setState({\n      currentScore: score,\n      status: \"Correct!\"\n    });\n  }\n  this.resetArray();\n}\n\n//reset when user clicks same image twice\nreset = () => {\n  this.setState({\n    status: \"You Lost!\",\n    highScore: this.state.highScore,\n    currentScore: 0,\n    clicked: [],\n    Icons,\n    gameOver: true \n  });\n  console.log(\"Game Over: \", this.state.gameOver);\n  this.resetArray();\n}\n\n//set array to be mapped for new shuffle\nresetArray = () => {\n  let newShuffle = shuffleArray(Icons);\n  this.setState({Icons: newShuffle});\n}\n\n  render() {\n    return (\n      <div>\n      <nav>\n        <NavBar status={this.state.status} currentScore={this.state.currentScore} highScore={this.state.highScore}/>\n      </nav>\n      \n      <Banner/>\n      <div className=\"\"> {this.state.Icons.map(icon => (\n        <Cards className=\"\" key={icon.id} id={icon.id} image={icon.image} clicked={this.clicked}/>\n        ))\n      }\n      \n      </div>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}